
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDErightUMINUSAND ASSIGN BOOLEAN COLON COMMA CONST DIVIDE DOT ELSE EQUAL FALSE FLOAT FOR FUNCTION GREATER_THAN GREATER_THAN_OR_EQUAL IDENTIFIER IF INTEGER LEFT_ARROW LEFT_CURLY_BRACE LEFT_SQUARE_BRACKET LESS_THAN LESS_THAN_OR_EQUAL LPREN MINUS MODULUS NOT NOT_EQUAL OR PLUS PRINT RETURN RIGHT_ARROW RIGHT_CURLY_BRACE RIGHT_SQUARE_BRACKET RPREN SEMICOLON STRING TIMES TRUE VAR WHILEexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : LPREN expression RPRENexpression : MINUS expression %prec UMINUSexpression : INTEGER\n                  | FLOAT'
    
_lr_action_items = {'LPREN':([0,2,3,6,7,8,9,],[3,3,3,3,3,3,3,]),'MINUS':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,],[2,7,2,2,-7,-8,2,2,2,2,-6,7,-1,-2,-3,-4,-5,]),'INTEGER':([0,2,3,6,7,8,9,],[4,4,4,4,4,4,4,]),'FLOAT':([0,2,3,6,7,8,9,],[5,5,5,5,5,5,5,]),'$end':([1,4,5,10,12,13,14,15,16,],[0,-7,-8,-6,-1,-2,-3,-4,-5,]),'PLUS':([1,4,5,10,11,12,13,14,15,16,],[6,-7,-8,-6,6,-1,-2,-3,-4,-5,]),'TIMES':([1,4,5,10,11,12,13,14,15,16,],[8,-7,-8,-6,8,8,8,-3,-4,-5,]),'DIVIDE':([1,4,5,10,11,12,13,14,15,16,],[9,-7,-8,-6,9,9,9,-3,-4,-5,]),'RPREN':([4,5,10,11,12,13,14,15,16,],[-7,-8,-6,16,-1,-2,-3,-4,-5,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression':([0,2,3,6,7,8,9,],[1,10,11,12,13,14,15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> expression","S'",1,None,None,None),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','dsharp_parser.py',14),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','dsharp_parser.py',15),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','dsharp_parser.py',16),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','dsharp_parser.py',17),
  ('expression -> LPREN expression RPREN','expression',3,'p_expression_group','dsharp_parser.py',24),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','dsharp_parser.py',28),
  ('expression -> INTEGER','expression',1,'p_expression_number','dsharp_parser.py',32),
  ('expression -> FLOAT','expression',1,'p_expression_number','dsharp_parser.py',33),
]

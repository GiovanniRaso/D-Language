
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN COLON COMMA CONST CONST DECREMENT DIVIDE DOT ELSE ELSE EQUAL EQUAL_TO FALSE FALSE FLOAT FOR FOR FUNCTION FUNCTION GREATER_THAN GREATER_THAN_OR_EQUAL IDENTIFIER IF IF INCREMENT INTEGER LEFT_ARROW LEFT_CURLY_BRACE LEFT_SQUARE_BRACKET LESS_THAN LESS_THAN_OR_EQUAL LPAREN MINUS MODULUS NOT NOT_EQUAL NOT_EQUAL_TO OR PLUS PRINT PRINT RETURN RETURN RIGHT_ARROW RIGHT_CURLY_BRACE RIGHT_SQUARE_BRACKET RPAREN SEMICOLON STRING THEN TIMES TRUE TRUE VAR VAR WHILE WHILEprogram : statement_list\n    statement_list : statement_list statement\n                   | statement\n    print_statement : PRINT expression SEMICOLON\n    statement : print_statement\n              | expression_statement\n              | compound_statement\n              | selection_statement\n              | iteration_statement\n              | assignment_statement\n              | declaration_statement\n    expression_statement : expression SEMICOLONcompound_statement : LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE\n    selection_statement : IF expression THEN compound_statement\n                        | IF expression THEN compound_statement ELSE compound_statement\n    \n    iteration_statement : WHILE LPAREN expression RPAREN compound_statement\n                        | FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement\n    assignment_statement : IDENTIFIER ASSIGN expression SEMICOLON\n    declaration_statement : VAR IDENTIFIER ASSIGN expression SEMICOLON\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | expression EQUAL expression\n               | expression NOT_EQUAL expression\n               | expression GREATER_THAN expression\n               | expression LESS_THAN expression\n               | expression GREATER_THAN_OR_EQUAL expression\n               | expression LESS_THAN_OR_EQUAL expression\n               | INTEGER\n               | FLOAT\n               | STRING\n               | BOOLEAN\n               | IDENTIFIER\n    '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,13,23,26,37,43,54,60,63,66,68,69,73,],[11,11,-3,-5,-6,-7,-8,-9,-10,-11,11,-2,-12,11,-4,-13,-14,-18,-16,-19,-15,-17,]),'LEFT_CURLY_BRACE':([0,2,3,4,5,6,7,8,9,10,13,23,26,37,43,54,55,60,61,63,65,66,68,69,72,73,],[13,13,-3,-5,-6,-7,-8,-9,-10,-11,13,-2,-12,13,-4,-13,13,-14,13,-18,13,-16,-19,-15,13,-17,]),'IF':([0,2,3,4,5,6,7,8,9,10,13,23,26,37,43,54,60,63,66,68,69,73,],[14,14,-3,-5,-6,-7,-8,-9,-10,-11,14,-2,-12,14,-4,-13,-14,-18,-16,-19,-15,-17,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,13,23,26,37,43,54,60,63,66,68,69,73,],[15,15,-3,-5,-6,-7,-8,-9,-10,-11,15,-2,-12,15,-4,-13,-14,-18,-16,-19,-15,-17,]),'FOR':([0,2,3,4,5,6,7,8,9,10,13,23,26,37,43,54,60,63,66,68,69,73,],[16,16,-3,-5,-6,-7,-8,-9,-10,-11,16,-2,-12,16,-4,-13,-14,-18,-16,-19,-15,-17,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,14,18,23,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,43,54,59,60,62,63,66,68,69,70,73,],[17,17,-3,-5,-6,-7,-8,-9,-10,-11,25,17,25,42,-2,-12,25,25,25,25,25,25,25,25,25,25,17,25,25,25,-4,-13,25,-14,25,-18,-16,-19,-15,25,-17,]),'VAR':([0,2,3,4,5,6,7,8,9,10,13,23,26,37,43,54,60,63,66,68,69,73,],[18,18,-3,-5,-6,-7,-8,-9,-10,-11,18,-2,-12,18,-4,-13,-14,-18,-16,-19,-15,-17,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,13,14,23,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,43,54,59,60,62,63,66,68,69,70,73,],[19,19,-3,-5,-6,-7,-8,-9,-10,-11,19,19,19,-2,-12,19,19,19,19,19,19,19,19,19,19,19,19,19,19,-4,-13,19,-14,19,-18,-16,-19,-15,19,-17,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,13,14,23,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,43,54,59,60,62,63,66,68,69,70,73,],[20,20,-3,-5,-6,-7,-8,-9,-10,-11,20,20,20,-2,-12,20,20,20,20,20,20,20,20,20,20,20,20,20,20,-4,-13,20,-14,20,-18,-16,-19,-15,20,-17,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,13,14,23,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,43,54,59,60,62,63,66,68,69,70,73,],[21,21,-3,-5,-6,-7,-8,-9,-10,-11,21,21,21,-2,-12,21,21,21,21,21,21,21,21,21,21,21,21,21,21,-4,-13,21,-14,21,-18,-16,-19,-15,21,-17,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,13,14,23,26,27,28,29,30,31,32,33,34,35,36,37,39,40,41,43,54,59,60,62,63,66,68,69,70,73,],[22,22,-3,-5,-6,-7,-8,-9,-10,-11,22,22,22,-2,-12,22,22,22,22,22,22,22,22,22,22,22,22,22,22,-4,-13,22,-14,22,-18,-16,-19,-15,22,-17,]),'$end':([1,2,3,4,5,6,7,8,9,10,23,26,43,54,60,63,66,68,69,73,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-2,-12,-4,-13,-14,-18,-16,-19,-15,-17,]),'RIGHT_CURLY_BRACE':([3,4,5,6,7,8,9,10,23,26,37,43,54,60,63,66,68,69,73,],[-3,-5,-6,-7,-8,-9,-10,-11,-2,-12,54,-4,-13,-14,-18,-16,-19,-15,-17,]),'SEMICOLON':([12,17,19,20,21,22,24,25,44,45,46,47,48,49,50,51,52,53,57,58,64,67,],[26,-34,-30,-31,-32,-33,43,-34,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,62,63,68,70,]),'PLUS':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[27,-34,-30,-31,-32,-33,27,-34,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'MINUS':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[28,-34,-30,-31,-32,-33,28,-34,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'TIMES':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[29,-34,-30,-31,-32,-33,29,-34,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'DIVIDE':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[30,-34,-30,-31,-32,-33,30,-34,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'EQUAL':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[31,-34,-30,-31,-32,-33,31,-34,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'NOT_EQUAL':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[32,-34,-30,-31,-32,-33,32,-34,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'GREATER_THAN':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[33,-34,-30,-31,-32,-33,33,-34,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'LESS_THAN':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[34,-34,-30,-31,-32,-33,34,-34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'GREATER_THAN_OR_EQUAL':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[35,-34,-30,-31,-32,-33,35,-34,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'LESS_THAN_OR_EQUAL':([12,17,19,20,21,22,24,25,38,44,45,46,47,48,49,50,51,52,53,56,57,58,64,67,71,],[36,-34,-30,-31,-32,-33,36,-34,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'LPAREN':([15,16,],[39,40,]),'ASSIGN':([17,42,],[41,59,]),'THEN':([19,20,21,22,25,38,44,45,46,47,48,49,50,51,52,53,],[-30,-31,-32,-33,-34,55,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,]),'RPAREN':([19,20,21,22,25,44,45,46,47,48,49,50,51,52,53,56,71,],[-30,-31,-32,-33,-34,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,61,72,]),'ELSE':([54,60,],[-13,65,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,13,],[2,37,]),'statement':([0,2,13,37,],[3,23,3,23,]),'print_statement':([0,2,13,37,],[4,4,4,4,]),'expression_statement':([0,2,13,37,],[5,5,5,5,]),'compound_statement':([0,2,13,37,55,61,65,72,],[6,6,6,6,60,66,69,73,]),'selection_statement':([0,2,13,37,],[7,7,7,7,]),'iteration_statement':([0,2,13,37,],[8,8,8,8,]),'assignment_statement':([0,2,13,37,],[9,9,9,9,]),'declaration_statement':([0,2,13,37,],[10,10,10,10,]),'expression':([0,2,11,13,14,27,28,29,30,31,32,33,34,35,36,37,39,40,41,59,62,70,],[12,12,24,12,38,44,45,46,47,48,49,50,51,52,53,12,56,57,58,64,67,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','d_pound.py',110),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','d_pound.py',115),
  ('statement_list -> statement','statement_list',1,'p_statement_list','d_pound.py',116),
  ('print_statement -> PRINT expression SEMICOLON','print_statement',3,'p_print_statement','d_pound.py',124),
  ('statement -> print_statement','statement',1,'p_statement','d_pound.py',129),
  ('statement -> expression_statement','statement',1,'p_statement','d_pound.py',130),
  ('statement -> compound_statement','statement',1,'p_statement','d_pound.py',131),
  ('statement -> selection_statement','statement',1,'p_statement','d_pound.py',132),
  ('statement -> iteration_statement','statement',1,'p_statement','d_pound.py',133),
  ('statement -> assignment_statement','statement',1,'p_statement','d_pound.py',134),
  ('statement -> declaration_statement','statement',1,'p_statement','d_pound.py',135),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','d_pound.py',140),
  ('compound_statement -> LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE','compound_statement',3,'p_compound_statement','d_pound.py',144),
  ('selection_statement -> IF expression THEN compound_statement','selection_statement',4,'p_selection_statement','d_pound.py',149),
  ('selection_statement -> IF expression THEN compound_statement ELSE compound_statement','selection_statement',6,'p_selection_statement','d_pound.py',150),
  ('iteration_statement -> WHILE LPAREN expression RPAREN compound_statement','iteration_statement',5,'p_iteration_statement','d_pound.py',159),
  ('iteration_statement -> FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN compound_statement','iteration_statement',9,'p_iteration_statement','d_pound.py',160),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','d_pound.py',168),
  ('declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','d_pound.py',173),
  ('expression -> expression PLUS expression','expression',3,'p_expression','d_pound.py',179),
  ('expression -> expression MINUS expression','expression',3,'p_expression','d_pound.py',180),
  ('expression -> expression TIMES expression','expression',3,'p_expression','d_pound.py',181),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','d_pound.py',182),
  ('expression -> expression EQUAL expression','expression',3,'p_expression','d_pound.py',183),
  ('expression -> expression NOT_EQUAL expression','expression',3,'p_expression','d_pound.py',184),
  ('expression -> expression GREATER_THAN expression','expression',3,'p_expression','d_pound.py',185),
  ('expression -> expression LESS_THAN expression','expression',3,'p_expression','d_pound.py',186),
  ('expression -> expression GREATER_THAN_OR_EQUAL expression','expression',3,'p_expression','d_pound.py',187),
  ('expression -> expression LESS_THAN_OR_EQUAL expression','expression',3,'p_expression','d_pound.py',188),
  ('expression -> INTEGER','expression',1,'p_expression','d_pound.py',189),
  ('expression -> FLOAT','expression',1,'p_expression','d_pound.py',190),
  ('expression -> STRING','expression',1,'p_expression','d_pound.py',191),
  ('expression -> BOOLEAN','expression',1,'p_expression','d_pound.py',192),
  ('expression -> IDENTIFIER','expression',1,'p_expression','d_pound.py',193),
]


# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN BOOLEAN COLON COMMA CONST CONST DIVIDE DOT ELSE ELSE EQUAL FALSE FALSE FLOAT FOR FOR FUNCTION FUNCTION GREATER_THAN GREATER_THAN_OR_EQUAL IDENTIFIER IF IF INTEGER LEFT_ARROW LEFT_CURLY_BRACE LEFT_SQUARE_BRACKET LESS_THAN LESS_THAN_OR_EQUAL LPAREN MINUS MODULUS NOT NOT_EQUAL OR PLUS PRINT PRINT RETURN RETURN RIGHT_ARROW RIGHT_CURLY_BRACE RIGHT_SQUARE_BRACKET RPAREN SEMICOLON STRING TIMES TRUE TRUE VAR VAR WHILE WHILEprogram : statement_list\n    statement_list : statement_list statement\n                   | statement\n    print_statement : PRINT expression SEMICOLON\n    statement : print_statement\n              | expression_statement\n              | compound_statement\n              | selection_statement\n              | iteration_statement\n              | assignment_statement\n              | declaration_statement\n    expression_statement : expression SEMICOLONcompound_statement : LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE\n    selection_statement : IF LPAREN expression RPAREN statement\n                        | IF LPAREN expression RPAREN statement ELSE statement\n    \n    iteration_statement : WHILE LPAREN expression RPAREN compound_statement\n                        | FOR LPAREN assignment_statement expression SEMICOLON expression RPAREN compound_statement\n    assignment_statement : IDENTIFIER ASSIGN expression SEMICOLON\n    declaration_statement : VAR IDENTIFIER ASSIGN expression SEMICOLON\n    \n    expression : expression PLUS expression\n               | expression MINUS expression\n               | expression TIMES expression\n               | expression DIVIDE expression\n               | INTEGER\n               | FLOAT\n               | STRING\n               | BOOLEAN\n               | IDENTIFIER\n    '
    
_lr_action_items = {'PRINT':([0,2,3,4,5,6,7,8,9,10,13,23,26,31,37,42,49,52,54,55,57,58,60,62,],[11,11,-3,-5,-6,-7,-8,-9,-10,-11,11,-2,-12,11,-4,-13,11,-18,-14,-16,-19,11,-15,-17,]),'LEFT_CURLY_BRACE':([0,2,3,4,5,6,7,8,9,10,13,23,26,31,37,42,49,50,52,54,55,57,58,60,61,62,],[13,13,-3,-5,-6,-7,-8,-9,-10,-11,13,-2,-12,13,-4,-13,13,13,-18,-14,-16,-19,13,-15,13,-17,]),'IF':([0,2,3,4,5,6,7,8,9,10,13,23,26,31,37,42,49,52,54,55,57,58,60,62,],[14,14,-3,-5,-6,-7,-8,-9,-10,-11,14,-2,-12,14,-4,-13,14,-18,-14,-16,-19,14,-15,-17,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,13,23,26,31,37,42,49,52,54,55,57,58,60,62,],[15,15,-3,-5,-6,-7,-8,-9,-10,-11,15,-2,-12,15,-4,-13,15,-18,-14,-16,-19,15,-15,-17,]),'FOR':([0,2,3,4,5,6,7,8,9,10,13,23,26,31,37,42,49,52,54,55,57,58,60,62,],[16,16,-3,-5,-6,-7,-8,-9,-10,-11,16,-2,-12,16,-4,-13,16,-18,-14,-16,-19,16,-15,-17,]),'IDENTIFIER':([0,2,3,4,5,6,7,8,9,10,11,13,18,23,26,27,28,29,30,31,32,33,34,35,37,42,45,48,49,52,54,55,56,57,58,60,62,],[17,17,-3,-5,-6,-7,-8,-9,-10,-11,25,17,36,-2,-12,25,25,25,25,17,25,25,46,25,-4,-13,25,25,17,-18,-14,-16,25,-19,17,-15,-17,]),'VAR':([0,2,3,4,5,6,7,8,9,10,13,23,26,31,37,42,49,52,54,55,57,58,60,62,],[18,18,-3,-5,-6,-7,-8,-9,-10,-11,18,-2,-12,18,-4,-13,18,-18,-14,-16,-19,18,-15,-17,]),'INTEGER':([0,2,3,4,5,6,7,8,9,10,11,13,23,26,27,28,29,30,31,32,33,35,37,42,45,48,49,52,54,55,56,57,58,60,62,],[19,19,-3,-5,-6,-7,-8,-9,-10,-11,19,19,-2,-12,19,19,19,19,19,19,19,19,-4,-13,19,19,19,-18,-14,-16,19,-19,19,-15,-17,]),'FLOAT':([0,2,3,4,5,6,7,8,9,10,11,13,23,26,27,28,29,30,31,32,33,35,37,42,45,48,49,52,54,55,56,57,58,60,62,],[20,20,-3,-5,-6,-7,-8,-9,-10,-11,20,20,-2,-12,20,20,20,20,20,20,20,20,-4,-13,20,20,20,-18,-14,-16,20,-19,20,-15,-17,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,13,23,26,27,28,29,30,31,32,33,35,37,42,45,48,49,52,54,55,56,57,58,60,62,],[21,21,-3,-5,-6,-7,-8,-9,-10,-11,21,21,-2,-12,21,21,21,21,21,21,21,21,-4,-13,21,21,21,-18,-14,-16,21,-19,21,-15,-17,]),'BOOLEAN':([0,2,3,4,5,6,7,8,9,10,11,13,23,26,27,28,29,30,31,32,33,35,37,42,45,48,49,52,54,55,56,57,58,60,62,],[22,22,-3,-5,-6,-7,-8,-9,-10,-11,22,22,-2,-12,22,22,22,22,22,22,22,22,-4,-13,22,22,22,-18,-14,-16,22,-19,22,-15,-17,]),'$end':([1,2,3,4,5,6,7,8,9,10,23,26,37,42,52,54,55,57,60,62,],[0,-1,-3,-5,-6,-7,-8,-9,-10,-11,-2,-12,-4,-13,-18,-14,-16,-19,-15,-17,]),'RIGHT_CURLY_BRACE':([3,4,5,6,7,8,9,10,23,26,31,37,42,52,54,55,57,60,62,],[-3,-5,-6,-7,-8,-9,-10,-11,-2,-12,42,-4,-13,-18,-14,-16,-19,-15,-17,]),'ELSE':([4,5,6,7,8,9,10,26,37,42,52,54,55,57,60,62,],[-5,-6,-7,-8,-9,-10,-11,-12,-4,-13,-18,58,-16,-19,-15,-17,]),'SEMICOLON':([12,17,19,20,21,22,24,25,38,39,40,41,47,51,53,],[26,-28,-24,-25,-26,-27,37,-28,-20,-21,-22,-23,52,56,57,]),'PLUS':([12,17,19,20,21,22,24,25,38,39,40,41,43,44,47,51,53,59,],[27,-28,-24,-25,-26,-27,27,-28,27,27,27,27,27,27,27,27,27,27,]),'MINUS':([12,17,19,20,21,22,24,25,38,39,40,41,43,44,47,51,53,59,],[28,-28,-24,-25,-26,-27,28,-28,28,28,28,28,28,28,28,28,28,28,]),'TIMES':([12,17,19,20,21,22,24,25,38,39,40,41,43,44,47,51,53,59,],[29,-28,-24,-25,-26,-27,29,-28,29,29,29,29,29,29,29,29,29,29,]),'DIVIDE':([12,17,19,20,21,22,24,25,38,39,40,41,43,44,47,51,53,59,],[30,-28,-24,-25,-26,-27,30,-28,30,30,30,30,30,30,30,30,30,30,]),'LPAREN':([14,15,16,],[32,33,34,]),'ASSIGN':([17,36,46,],[35,48,35,]),'RPAREN':([19,20,21,22,25,38,39,40,41,43,44,59,],[-24,-25,-26,-27,-28,-20,-21,-22,-23,49,50,61,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,13,],[2,31,]),'statement':([0,2,13,31,49,58,],[3,23,3,23,54,60,]),'print_statement':([0,2,13,31,49,58,],[4,4,4,4,4,4,]),'expression_statement':([0,2,13,31,49,58,],[5,5,5,5,5,5,]),'compound_statement':([0,2,13,31,49,50,58,61,],[6,6,6,6,6,55,6,62,]),'selection_statement':([0,2,13,31,49,58,],[7,7,7,7,7,7,]),'iteration_statement':([0,2,13,31,49,58,],[8,8,8,8,8,8,]),'assignment_statement':([0,2,13,31,34,49,58,],[9,9,9,9,45,9,9,]),'declaration_statement':([0,2,13,31,49,58,],[10,10,10,10,10,10,]),'expression':([0,2,11,13,27,28,29,30,31,32,33,35,45,48,49,56,58,],[12,12,24,12,38,39,40,41,12,43,44,47,51,53,12,59,12,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','d_pound.py',104),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','d_pound.py',109),
  ('statement_list -> statement','statement_list',1,'p_statement_list','d_pound.py',110),
  ('print_statement -> PRINT expression SEMICOLON','print_statement',3,'p_print_statement','d_pound.py',118),
  ('statement -> print_statement','statement',1,'p_statement','d_pound.py',123),
  ('statement -> expression_statement','statement',1,'p_statement','d_pound.py',124),
  ('statement -> compound_statement','statement',1,'p_statement','d_pound.py',125),
  ('statement -> selection_statement','statement',1,'p_statement','d_pound.py',126),
  ('statement -> iteration_statement','statement',1,'p_statement','d_pound.py',127),
  ('statement -> assignment_statement','statement',1,'p_statement','d_pound.py',128),
  ('statement -> declaration_statement','statement',1,'p_statement','d_pound.py',129),
  ('expression_statement -> expression SEMICOLON','expression_statement',2,'p_expression_statement','d_pound.py',134),
  ('compound_statement -> LEFT_CURLY_BRACE statement_list RIGHT_CURLY_BRACE','compound_statement',3,'p_compound_statement','d_pound.py',138),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','d_pound.py',143),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','d_pound.py',144),
  ('iteration_statement -> WHILE LPAREN expression RPAREN compound_statement','iteration_statement',5,'p_iteration_statement','d_pound.py',153),
  ('iteration_statement -> FOR LPAREN assignment_statement expression SEMICOLON expression RPAREN compound_statement','iteration_statement',8,'p_iteration_statement','d_pound.py',154),
  ('assignment_statement -> IDENTIFIER ASSIGN expression SEMICOLON','assignment_statement',4,'p_assignment_statement','d_pound.py',164),
  ('declaration_statement -> VAR IDENTIFIER ASSIGN expression SEMICOLON','declaration_statement',5,'p_declaration_statement','d_pound.py',169),
  ('expression -> expression PLUS expression','expression',3,'p_expression','d_pound.py',175),
  ('expression -> expression MINUS expression','expression',3,'p_expression','d_pound.py',176),
  ('expression -> expression TIMES expression','expression',3,'p_expression','d_pound.py',177),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression','d_pound.py',178),
  ('expression -> INTEGER','expression',1,'p_expression','d_pound.py',179),
  ('expression -> FLOAT','expression',1,'p_expression','d_pound.py',180),
  ('expression -> STRING','expression',1,'p_expression','d_pound.py',181),
  ('expression -> BOOLEAN','expression',1,'p_expression','d_pound.py',182),
  ('expression -> IDENTIFIER','expression',1,'p_expression','d_pound.py',183),
]

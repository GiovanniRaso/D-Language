Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND
    ASSIGN
    BOOLEAN
    COLON
    COMMA
    CONST
    DOT
    ELSE
    EQUAL
    FALSE
    FOR
    FUNCTION
    GREATER_THAN
    GREATER_THAN_OR_EQUAL
    IDENTIFIER
    IF
    LEFT_ARROW
    LEFT_CURLY_BRACE
    LEFT_SQUARE_BRACKET
    LESS_THAN
    LESS_THAN_OR_EQUAL
    MODULUS
    NOT
    NOT_EQUAL
    OR
    PRINT
    RETURN
    RIGHT_ARROW
    RIGHT_CURLY_BRACE
    RIGHT_SQUARE_BRACKET
    SEMICOLON
    STRING
    TRUE
    VAR
    WHILE

Grammar

Rule 0     S' -> expression
Rule 1     expression -> expression PLUS expression
Rule 2     expression -> expression MINUS expression
Rule 3     expression -> expression TIMES expression
Rule 4     expression -> expression DIVIDE expression
Rule 5     expression -> LPREN expression RPREN
Rule 6     expression -> MINUS expression
Rule 7     expression -> INTEGER
Rule 8     expression -> FLOAT

Terminals, with rules where they appear

AND                  : 
ASSIGN               : 
BOOLEAN              : 
COLON                : 
COMMA                : 
CONST                : 
DIVIDE               : 4
DOT                  : 
ELSE                 : 
EQUAL                : 
FALSE                : 
FLOAT                : 8
FOR                  : 
FUNCTION             : 
GREATER_THAN         : 
GREATER_THAN_OR_EQUAL : 
IDENTIFIER           : 
IF                   : 
INTEGER              : 7
LEFT_ARROW           : 
LEFT_CURLY_BRACE     : 
LEFT_SQUARE_BRACKET  : 
LESS_THAN            : 
LESS_THAN_OR_EQUAL   : 
LPREN                : 5
MINUS                : 2 6
MODULUS              : 
NOT                  : 
NOT_EQUAL            : 
OR                   : 
PLUS                 : 1
PRINT                : 
RETURN               : 
RIGHT_ARROW          : 
RIGHT_CURLY_BRACE    : 
RIGHT_SQUARE_BRACKET : 
RPREN                : 5
SEMICOLON            : 
STRING               : 
TIMES                : 3
TRUE                 : 
VAR                  : 
WHILE                : 
error                : 

Nonterminals, with rules where they appear

expression           : 1 1 2 2 3 3 4 4 5 6 0

Parsing method: LALR

state 0

    (0) S' -> . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPREN expression RPREN
    (6) expression -> . MINUS expression
    (7) expression -> . INTEGER
    (8) expression -> . FLOAT

    LPREN           shift and go to state 3
    MINUS           shift and go to state 2
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 1

state 1

    (0) S' -> expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 2

    (6) expression -> MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPREN expression RPREN
    (6) expression -> . MINUS expression
    (7) expression -> . INTEGER
    (8) expression -> . FLOAT

    LPREN           shift and go to state 3
    MINUS           shift and go to state 2
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 10

state 3

    (5) expression -> LPREN . expression RPREN
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPREN expression RPREN
    (6) expression -> . MINUS expression
    (7) expression -> . INTEGER
    (8) expression -> . FLOAT

    LPREN           shift and go to state 3
    MINUS           shift and go to state 2
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 11

state 4

    (7) expression -> INTEGER .

    PLUS            reduce using rule 7 (expression -> INTEGER .)
    MINUS           reduce using rule 7 (expression -> INTEGER .)
    TIMES           reduce using rule 7 (expression -> INTEGER .)
    DIVIDE          reduce using rule 7 (expression -> INTEGER .)
    $end            reduce using rule 7 (expression -> INTEGER .)
    RPREN           reduce using rule 7 (expression -> INTEGER .)


state 5

    (8) expression -> FLOAT .

    PLUS            reduce using rule 8 (expression -> FLOAT .)
    MINUS           reduce using rule 8 (expression -> FLOAT .)
    TIMES           reduce using rule 8 (expression -> FLOAT .)
    DIVIDE          reduce using rule 8 (expression -> FLOAT .)
    $end            reduce using rule 8 (expression -> FLOAT .)
    RPREN           reduce using rule 8 (expression -> FLOAT .)


state 6

    (1) expression -> expression PLUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPREN expression RPREN
    (6) expression -> . MINUS expression
    (7) expression -> . INTEGER
    (8) expression -> . FLOAT

    LPREN           shift and go to state 3
    MINUS           shift and go to state 2
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 12

state 7

    (2) expression -> expression MINUS . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPREN expression RPREN
    (6) expression -> . MINUS expression
    (7) expression -> . INTEGER
    (8) expression -> . FLOAT

    LPREN           shift and go to state 3
    MINUS           shift and go to state 2
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 13

state 8

    (3) expression -> expression TIMES . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPREN expression RPREN
    (6) expression -> . MINUS expression
    (7) expression -> . INTEGER
    (8) expression -> . FLOAT

    LPREN           shift and go to state 3
    MINUS           shift and go to state 2
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 14

state 9

    (4) expression -> expression DIVIDE . expression
    (1) expression -> . expression PLUS expression
    (2) expression -> . expression MINUS expression
    (3) expression -> . expression TIMES expression
    (4) expression -> . expression DIVIDE expression
    (5) expression -> . LPREN expression RPREN
    (6) expression -> . MINUS expression
    (7) expression -> . INTEGER
    (8) expression -> . FLOAT

    LPREN           shift and go to state 3
    MINUS           shift and go to state 2
    INTEGER         shift and go to state 4
    FLOAT           shift and go to state 5

    expression                     shift and go to state 15

state 10

    (6) expression -> MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 6 (expression -> MINUS expression .)
    MINUS           reduce using rule 6 (expression -> MINUS expression .)
    TIMES           reduce using rule 6 (expression -> MINUS expression .)
    DIVIDE          reduce using rule 6 (expression -> MINUS expression .)
    $end            reduce using rule 6 (expression -> MINUS expression .)
    RPREN           reduce using rule 6 (expression -> MINUS expression .)

  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 11

    (5) expression -> LPREN expression . RPREN
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    RPREN           shift and go to state 16
    PLUS            shift and go to state 6
    MINUS           shift and go to state 7
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9


state 12

    (1) expression -> expression PLUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 1 (expression -> expression PLUS expression .)
    MINUS           reduce using rule 1 (expression -> expression PLUS expression .)
    $end            reduce using rule 1 (expression -> expression PLUS expression .)
    RPREN           reduce using rule 1 (expression -> expression PLUS expression .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9

  ! TIMES           [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 1 (expression -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]


state 13

    (2) expression -> expression MINUS expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 2 (expression -> expression MINUS expression .)
    MINUS           reduce using rule 2 (expression -> expression MINUS expression .)
    $end            reduce using rule 2 (expression -> expression MINUS expression .)
    RPREN           reduce using rule 2 (expression -> expression MINUS expression .)
    TIMES           shift and go to state 8
    DIVIDE          shift and go to state 9

  ! TIMES           [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 2 (expression -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]


state 14

    (3) expression -> expression TIMES expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 3 (expression -> expression TIMES expression .)
    MINUS           reduce using rule 3 (expression -> expression TIMES expression .)
    TIMES           reduce using rule 3 (expression -> expression TIMES expression .)
    DIVIDE          reduce using rule 3 (expression -> expression TIMES expression .)
    $end            reduce using rule 3 (expression -> expression TIMES expression .)
    RPREN           reduce using rule 3 (expression -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 15

    (4) expression -> expression DIVIDE expression .
    (1) expression -> expression . PLUS expression
    (2) expression -> expression . MINUS expression
    (3) expression -> expression . TIMES expression
    (4) expression -> expression . DIVIDE expression

    PLUS            reduce using rule 4 (expression -> expression DIVIDE expression .)
    MINUS           reduce using rule 4 (expression -> expression DIVIDE expression .)
    TIMES           reduce using rule 4 (expression -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 4 (expression -> expression DIVIDE expression .)
    $end            reduce using rule 4 (expression -> expression DIVIDE expression .)
    RPREN           reduce using rule 4 (expression -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 6 ]
  ! MINUS           [ shift and go to state 7 ]
  ! TIMES           [ shift and go to state 8 ]
  ! DIVIDE          [ shift and go to state 9 ]


state 16

    (5) expression -> LPREN expression RPREN .

    PLUS            reduce using rule 5 (expression -> LPREN expression RPREN .)
    MINUS           reduce using rule 5 (expression -> LPREN expression RPREN .)
    TIMES           reduce using rule 5 (expression -> LPREN expression RPREN .)
    DIVIDE          reduce using rule 5 (expression -> LPREN expression RPREN .)
    $end            reduce using rule 5 (expression -> LPREN expression RPREN .)
    RPREN           reduce using rule 5 (expression -> LPREN expression RPREN .)

